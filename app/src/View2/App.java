/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View2;

//import Model.Produits.Produit;
//import View2.model.ProduitsTableModel;
import Controller.IApp;
import Controller.*;
import Controller.Exceptions.*;
import Model.Commande.Commande;
import Model.Exceptions.IdDejaDefiniException;
import Model.Plateaux.Plateau;
import Model.Produits.AutreProduit;
import Model.Produits.Charcuterie;
import Model.Produits.Fromage;
import Model.Produits.Fruit;
import View2.model.AccueilListModel;
import View2.model.AccueilTableModel;
import View2.model.AutreTableModel;
import View2.model.CharcuterieTableModel;
import View2.model.CommandeTableModel;
import View2.model.FromageTableModel;
import View2.model.FruitTableModel;
import View2.model.ParCommandePlanificationModel;
import View2.model.PlateauxTableModel;
import View2.model.TotalPlanificationModel;
import java.awt.CardLayout;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.swing.JCheckBox;
import javax.swing.JToggleButton;
import javax.swing.JOptionPane;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author potatos, Timon, LÃ©a
 */
public class App extends javax.swing.JFrame {

    private IApp iApp;

    private FromageTableModel fromageModel = new FromageTableModel();
    private CharcuterieTableModel charcuterieModel = new CharcuterieTableModel();
    private FruitTableModel fruitModel = new FruitTableModel();
    private AutreTableModel autreModel = new AutreTableModel();
    private PlateauxTableModel plateauModel = new PlateauxTableModel();
    private TotalPlanificationModel totalPlanificationModel = new TotalPlanificationModel();
    private ParCommandePlanificationModel parCommandePlanificationModel = new ParCommandePlanificationModel();
    private AccueilTableModel accueilTableModel = new AccueilTableModel();
    private AccueilListModel accueilListModel = new AccueilListModel();
    private CommandeTableModel commandeModel = new CommandeTableModel();

    /**
     * Creates new form App
     */
    public App(IApp iApp) {
        initComponents();
        this.iApp = iApp;
        //accueil
        refreshAccueil();
        aPreparerClientJTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    accueilTableModel.showCommande(event.getFirstIndex());
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainControlButtonGroup = new javax.swing.ButtonGroup();
        commandesButtonGroup = new javax.swing.ButtonGroup();
        produitsButtonGroup = new javax.swing.ButtonGroup();
        planificationButtonGroup = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        mainControlPanel = new javax.swing.JPanel();
        accueilToggleButton = new javax.swing.JToggleButton();
        produitsToggleButton = new javax.swing.JToggleButton();
        commandesToggleButton = new javax.swing.JToggleButton();
        plateauxToggleButton = new javax.swing.JToggleButton();
        planificationToggleButton = new javax.swing.JToggleButton();
        centrePanel = new javax.swing.JPanel();
        accueilPanel = new javax.swing.JPanel();
        welcomeJLabel = new javax.swing.JLabel();
        recupAPreparerJPanel = new javax.swing.JPanel();
        aPreparerClientJPanel = new javax.swing.JPanel();
        aPreparerClientJScrollPane = new javax.swing.JScrollPane();
        aPreparerClientJTable = new javax.swing.JTable();
        recupTodayJPanel = new javax.swing.JPanel();
        recupTodayJLabel = new javax.swing.JLabel();
        recupTodayJScrollPane = new javax.swing.JScrollPane();
        recupTodayJList = new javax.swing.JList<>();
        produitsPanel = new javax.swing.JPanel();
        crudProduitsMenuJPanel1 = new javax.swing.JPanel();
        deleteProduitJToggleButton1 = new javax.swing.JButton();
        editProduitJToggleButton1 = new javax.swing.JButton();
        addProduitsJToggleButton = new javax.swing.JButton();
        produitsMenuJPanel = new javax.swing.JPanel();
        fromageProduitsJToggleButton = new javax.swing.JToggleButton();
        charcuterieProduitsJToggleButton = new javax.swing.JToggleButton();
        fruitProduitsJToggleButton = new javax.swing.JToggleButton();
        autreProduitsJToggleButton = new javax.swing.JToggleButton();
        produitsJScrollPane = new javax.swing.JScrollPane();
        produitsJTable = new javax.swing.JTable();
        commandesPanel = new javax.swing.JPanel();
        crudCommandesMenuJPanel2 = new javax.swing.JPanel();
        deleteCommandeJToggleButton2 = new javax.swing.JButton();
        editCommandeProduitJToggleButton2 = new javax.swing.JButton();
        addCommandesJButton = new javax.swing.JButton();
        commandesMenuJPanel = new javax.swing.JPanel();
        aPreparerJToggleButton = new javax.swing.JToggleButton();
        aRecupererJToggleButton = new javax.swing.JToggleButton();
        recupereesJToggleButton = new javax.swing.JToggleButton();
        archiveesJToggleButton = new javax.swing.JToggleButton();
        commandesJScrollPane = new javax.swing.JScrollPane();
        commandesJTable = new javax.swing.JTable();
        plateauxPanel = new javax.swing.JPanel();
        crudPlateauxMenuJPanel3 = new javax.swing.JPanel();
        deletePlateauToggleButton = new javax.swing.JButton();
        editPlateauJToggleButton = new javax.swing.JButton();
        addPlateauJButton = new javax.swing.JButton();
        plateauxMenuJPanel = new javax.swing.JPanel();
        plateauStandardJButton = new javax.swing.JButton();
        plateauxTableJScrollPane = new javax.swing.JScrollPane();
        plateauxJTable = new javax.swing.JTable();
        planificationPanel = new javax.swing.JPanel();
        planificationMenuJPanel = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser(new Date());
        planificationChoiceMenuJPanel1 = new javax.swing.JPanel();
        totalJToggleButton = new javax.swing.JToggleButton();
        parCommandeJToggleButton = new javax.swing.JToggleButton();
        planificationCards = new javax.swing.JPanel();
        totalPlanificationJPanel = new javax.swing.JPanel();
        totalPlanificationJScrollPane = new javax.swing.JScrollPane();
        totalPlanificationJTable = new javax.swing.JTable();
        parCommandePlanificationJPanel1 = new javax.swing.JPanel();
        planificationCommandeJComboBox = new javax.swing.JComboBox<Commande>();
        parCommandePlanificationJScrollPane = new javax.swing.JScrollPane();
        parCommandePlanifcationJTable = new javax.swing.JTable();

        jMenuItem1.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(904, 489));
        getContentPane().setLayout(new java.awt.BorderLayout(0, 20));

        mainControlPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 0, 10));
        mainControlPanel.setMinimumSize(new java.awt.Dimension(120, 45));
        mainControlPanel.setPreferredSize(new java.awt.Dimension(120, 45));
        mainControlPanel.setLayout(new java.awt.GridLayout(1, 5, 10, 0));

        accueilToggleButton.setBackground(new java.awt.Color(242, 242, 242));
        mainControlButtonGroup.add(accueilToggleButton);
        accueilToggleButton.setSelected(true);
        accueilToggleButton.setText("Accueil");
        accueilToggleButton.setMinimumSize(new java.awt.Dimension(18, 30));
        accueilToggleButton.setPreferredSize(new java.awt.Dimension(18, 30));
        accueilToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainControlToggleButtonActionPerformed(evt);
            }
        });
        mainControlPanel.add(accueilToggleButton);

        produitsToggleButton.setBackground(new java.awt.Color(242, 242, 242));
        mainControlButtonGroup.add(produitsToggleButton);
        produitsToggleButton.setText("Produits");
        produitsToggleButton.setMinimumSize(new java.awt.Dimension(18, 30));
        produitsToggleButton.setPreferredSize(new java.awt.Dimension(18, 30));
        produitsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainControlToggleButtonActionPerformed(evt);
            }
        });
        mainControlPanel.add(produitsToggleButton);

        commandesToggleButton.setBackground(new java.awt.Color(242, 242, 242));
        mainControlButtonGroup.add(commandesToggleButton);
        commandesToggleButton.setText("Commandes");
        commandesToggleButton.setMinimumSize(new java.awt.Dimension(18, 30));
        commandesToggleButton.setPreferredSize(new java.awt.Dimension(18, 30));
        commandesToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainControlToggleButtonActionPerformed(evt);
            }
        });
        mainControlPanel.add(commandesToggleButton);

        plateauxToggleButton.setBackground(new java.awt.Color(242, 242, 242));
        mainControlButtonGroup.add(plateauxToggleButton);
        plateauxToggleButton.setText("Plateaux");
        plateauxToggleButton.setMinimumSize(new java.awt.Dimension(18, 30));
        plateauxToggleButton.setPreferredSize(new java.awt.Dimension(18, 30));
        plateauxToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainControlToggleButtonActionPerformed(evt);
            }
        });
        mainControlPanel.add(plateauxToggleButton);

        planificationToggleButton.setBackground(new java.awt.Color(242, 242, 242));
        mainControlButtonGroup.add(planificationToggleButton);
        planificationToggleButton.setText("Planification");
        planificationToggleButton.setMinimumSize(new java.awt.Dimension(18, 30));
        planificationToggleButton.setPreferredSize(new java.awt.Dimension(18, 30));
        planificationToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainControlToggleButtonActionPerformed(evt);
            }
        });
        mainControlPanel.add(planificationToggleButton);

        getContentPane().add(mainControlPanel, java.awt.BorderLayout.PAGE_START);

        centrePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        centrePanel.setLayout(new java.awt.CardLayout());

        accueilPanel.setLayout(new java.awt.BorderLayout(0, 20));

        welcomeJLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        welcomeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeJLabel.setText("Bienvenue !");
        welcomeJLabel.setMaximumSize(new java.awt.Dimension(68, 30));
        welcomeJLabel.setMinimumSize(new java.awt.Dimension(68, 30));
        welcomeJLabel.setPreferredSize(new java.awt.Dimension(68, 30));
        accueilPanel.add(welcomeJLabel, java.awt.BorderLayout.PAGE_START);

        recupAPreparerJPanel.setLayout(new java.awt.BorderLayout(30, 0));

        aPreparerClientJPanel.setLayout(new java.awt.BorderLayout());

        aPreparerClientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Commandes Ã  prÃ©parer pour demain", "Produits nÃ©cessaires"
            }
        ));
        aPreparerClientJScrollPane.setViewportView(aPreparerClientJTable);

        aPreparerClientJPanel.add(aPreparerClientJScrollPane, java.awt.BorderLayout.CENTER);

        recupAPreparerJPanel.add(aPreparerClientJPanel, java.awt.BorderLayout.CENTER);

        recupTodayJPanel.setLayout(new java.awt.BorderLayout(15, 0));

        recupTodayJLabel.setText("RÃ©cupÃ©rations de commandes");
        recupTodayJPanel.add(recupTodayJLabel, java.awt.BorderLayout.PAGE_START);

        recupTodayJList.setModel(accueilListModel);
        recupTodayJScrollPane.setViewportView(recupTodayJList);

        recupTodayJPanel.add(recupTodayJScrollPane, java.awt.BorderLayout.CENTER);

        recupAPreparerJPanel.add(recupTodayJPanel, java.awt.BorderLayout.EAST);

        accueilPanel.add(recupAPreparerJPanel, java.awt.BorderLayout.CENTER);

        centrePanel.add(accueilPanel, "Accueil");

        produitsPanel.setLayout(new java.awt.BorderLayout(0, 10));

        deleteProduitJToggleButton1.setText("ð");
        deleteProduitJToggleButton1.setToolTipText("Supprimer un produit");
        deleteProduitJToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProduitJToggleButton1ActionPerformed(evt);
            }
        });
        crudProduitsMenuJPanel1.add(deleteProduitJToggleButton1);

        editProduitJToggleButton1.setText("â");
        editProduitJToggleButton1.setToolTipText("Modifier un produit");
        editProduitJToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProduitJToggleButton1ActionPerformed(evt);
            }
        });
        crudProduitsMenuJPanel1.add(editProduitJToggleButton1);

        addProduitsJToggleButton.setText("+");
        addProduitsJToggleButton.setToolTipText("CrÃ©er un produit");
        addProduitsJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProduitsJToggleButtonActionPerformed(evt);
            }
        });
        crudProduitsMenuJPanel1.add(addProduitsJToggleButton);

        produitsPanel.add(crudProduitsMenuJPanel1, java.awt.BorderLayout.NORTH);

        produitsButtonGroup.add(fromageProduitsJToggleButton);
        fromageProduitsJToggleButton.setSelected(true);
        fromageProduitsJToggleButton.setText("Fromage");
        fromageProduitsJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromageProduitsJToggleButtonActionPerformed(evt);
            }
        });
        produitsMenuJPanel.add(fromageProduitsJToggleButton);

        produitsButtonGroup.add(charcuterieProduitsJToggleButton);
        charcuterieProduitsJToggleButton.setText("Charcuterie");
        charcuterieProduitsJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charcuterieProduitsJToggleButtonActionPerformed(evt);
            }
        });
        produitsMenuJPanel.add(charcuterieProduitsJToggleButton);

        produitsButtonGroup.add(fruitProduitsJToggleButton);
        fruitProduitsJToggleButton.setText("Fruit");
        fruitProduitsJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fruitProduitsJToggleButtonActionPerformed(evt);
            }
        });
        produitsMenuJPanel.add(fruitProduitsJToggleButton);

        produitsButtonGroup.add(autreProduitsJToggleButton);
        autreProduitsJToggleButton.setText("Autre");
        autreProduitsJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autreProduitsJToggleButtonActionPerformed(evt);
            }
        });
        produitsMenuJPanel.add(autreProduitsJToggleButton);

        produitsPanel.add(produitsMenuJPanel, java.awt.BorderLayout.CENTER);

        produitsJTable.setModel(fromageModel);
        produitsJScrollPane.setViewportView(produitsJTable);

        produitsPanel.add(produitsJScrollPane, java.awt.BorderLayout.SOUTH);

        centrePanel.add(produitsPanel, "Produits");

        commandesPanel.setLayout(new java.awt.BorderLayout(0, 10));

        deleteCommandeJToggleButton2.setText("ð");
        deleteCommandeJToggleButton2.setToolTipText("Supprimer une commande");
        deleteCommandeJToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommandeJToggleButton2ActionPerformed(evt);
            }
        });
        crudCommandesMenuJPanel2.add(deleteCommandeJToggleButton2);

        editCommandeProduitJToggleButton2.setText("â");
        editCommandeProduitJToggleButton2.setToolTipText("Editer une commande");
        editCommandeProduitJToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCommandeProduitJToggleButton2ActionPerformed(evt);
            }
        });
        crudCommandesMenuJPanel2.add(editCommandeProduitJToggleButton2);

        addCommandesJButton.setText("+");
        addCommandesJButton.setToolTipText("CrÃ©er une commande");
        addCommandesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommandesJButtonActionPerformed(evt);
            }
        });
        crudCommandesMenuJPanel2.add(addCommandesJButton);

        commandesPanel.add(crudCommandesMenuJPanel2, java.awt.BorderLayout.NORTH);

        commandesButtonGroup.add(aPreparerJToggleButton);
        aPreparerJToggleButton.setSelected(true);
        aPreparerJToggleButton.setText("A prÃ©parer");
        aPreparerJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aPreparerJToggleButtonActionPerformed(evt);
            }
        });
        commandesMenuJPanel.add(aPreparerJToggleButton);

        commandesButtonGroup.add(aRecupererJToggleButton);
        aRecupererJToggleButton.setText("A rÃ©cupÃ©rer");
        aRecupererJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aRecupererJToggleButtonActionPerformed(evt);
            }
        });
        commandesMenuJPanel.add(aRecupererJToggleButton);

        commandesButtonGroup.add(recupereesJToggleButton);
        recupereesJToggleButton.setText("RÃ©cupÃ©rÃ©es");
        recupereesJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recupereesJToggleButtonActionPerformed(evt);
            }
        });
        commandesMenuJPanel.add(recupereesJToggleButton);

        commandesButtonGroup.add(archiveesJToggleButton);
        archiveesJToggleButton.setText("ArchivÃ©es");
        archiveesJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveesJToggleButtonActionPerformed(evt);
            }
        });
        commandesMenuJPanel.add(archiveesJToggleButton);

        commandesPanel.add(commandesMenuJPanel, java.awt.BorderLayout.CENTER);

        commandesJTable.setModel(commandeModel);
        commandesJScrollPane.setViewportView(commandesJTable);
        if (commandesJTable.getColumnModel().getColumnCount() > 0) {
            commandesJTable.getColumnModel().getColumn(1).setHeaderValue("Date de crÃ©ation");
            commandesJTable.getColumnModel().getColumn(2).setHeaderValue("Date rÃ©cupÃ©ration");
            commandesJTable.getColumnModel().getColumn(3).setHeaderValue("Nombre plateaux");
            commandesJTable.getColumnModel().getColumn(4).setHeaderValue("Prix indicatif");
            commandesJTable.getColumnModel().getColumn(5).setHeaderValue("Montant payÃ©");
        }

        commandesPanel.add(commandesJScrollPane, java.awt.BorderLayout.SOUTH);

        centrePanel.add(commandesPanel, "Commandes");

        plateauxPanel.setLayout(new java.awt.BorderLayout(0, 10));

        deletePlateauToggleButton.setText("ð");
        deletePlateauToggleButton.setToolTipText("Supprimer un plateau");
        deletePlateauToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlateauToggleButtonActionPerformed(evt);
            }
        });
        crudPlateauxMenuJPanel3.add(deletePlateauToggleButton);

        editPlateauJToggleButton.setText("â");
        editPlateauJToggleButton.setToolTipText("Editer un plateau");
        editPlateauJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlateauJToggleButtonActionPerformed(evt);
            }
        });
        crudPlateauxMenuJPanel3.add(editPlateauJToggleButton);

        addPlateauJButton.setText("+");
        addPlateauJButton.setToolTipText("Ajouter un plateau");
        addPlateauJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlateauJButtonActionPerformed(evt);
            }
        });
        crudPlateauxMenuJPanel3.add(addPlateauJButton);

        plateauxPanel.add(crudPlateauxMenuJPanel3, java.awt.BorderLayout.NORTH);

        plateauStandardJButton.setText("Plateaux standards");
        plateauStandardJButton.setFocusPainted(false);
        plateauStandardJButton.setFocusable(false);
        plateauStandardJButton.setSelected(true);
        plateauxMenuJPanel.add(plateauStandardJButton);

        plateauxPanel.add(plateauxMenuJPanel, java.awt.BorderLayout.CENTER);

        plateauxJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nom Plateau", "Nombre de Produits", "Prix indicatif (Euro/Personne)"
            }
        ));
        plateauxTableJScrollPane.setViewportView(plateauxJTable);

        plateauxPanel.add(plateauxTableJScrollPane, java.awt.BorderLayout.SOUTH);

        centrePanel.add(plateauxPanel, "Plateaux");

        planificationPanel.setLayout(new java.awt.BorderLayout(0, 10));

        planificationMenuJPanel.setLayout(new java.awt.GridBagLayout());

        jDateChooser1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jDateChooser1.setToolTipText("Calendrier");
        jDateChooser1.getCalendarButton().setToolTipText("Selectionner la date");
        jDateChooser1.getDateEditor().getUiComponent().setToolTipText("Date selectionnÃ©e");
        jDateChooser1.getJCalendar().setToolTipText("Selectionner la date");
        jDateChooser1.setPreferredSize(new java.awt.Dimension(200, 27));
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        planificationMenuJPanel.add(jDateChooser1, gridBagConstraints);

        planificationButtonGroup.add(totalJToggleButton);
        totalJToggleButton.setSelected(true);
        totalJToggleButton.setText("Total");
        totalJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planificationChoiceActionPerformed(evt);
            }
        });
        planificationChoiceMenuJPanel1.add(totalJToggleButton);

        planificationButtonGroup.add(parCommandeJToggleButton);
        parCommandeJToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planificationChoiceActionPerformed(evt);
            }
        });
        parCommandeJToggleButton.setText("Par commande");
        planificationChoiceMenuJPanel1.add(parCommandeJToggleButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        planificationMenuJPanel.add(planificationChoiceMenuJPanel1, gridBagConstraints);

        planificationPanel.add(planificationMenuJPanel, java.awt.BorderLayout.PAGE_START);

        planificationCards.setLayout(new java.awt.CardLayout());

        totalPlanificationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nom Produit", "Quantite"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        totalPlanificationJScrollPane.setViewportView(totalPlanificationJTable);

        totalPlanificationJPanel.add(totalPlanificationJScrollPane);

        planificationCards.add(totalPlanificationJPanel, "Total");

        parCommandePlanificationJPanel1.setLayout(new java.awt.GridBagLayout());

        planificationCommandeJComboBox.setModel(new DefaultComboBoxModel<Commande>());
        planificationCommandeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planificationCommandeJComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        parCommandePlanificationJPanel1.add(planificationCommandeJComboBox, gridBagConstraints);

        parCommandePlanifcationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nom Produit", "Quantite"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        parCommandePlanifcationJTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parCommandePlanifcationJTablePropertyChange(evt);
            }
        });
        parCommandePlanificationJScrollPane.setViewportView(parCommandePlanifcationJTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        parCommandePlanificationJPanel1.add(parCommandePlanificationJScrollPane, gridBagConstraints);

        planificationCards.add(parCommandePlanificationJPanel1, "Par commande");

        planificationPanel.add(planificationCards, java.awt.BorderLayout.CENTER);

        centrePanel.add(planificationPanel, "Planification");

        getContentPane().add(centrePanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mainControlToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainControlToggleButtonActionPerformed
        JToggleButton button = (JToggleButton) evt.getSource();
        String str = button.getText();
        CardLayout cardLayout = (CardLayout) centrePanel.getLayout();
        cardLayout.show(centrePanel, str);

        //les donnÃ©es sont rafraichies en cliquant sur les boutons du haut
        if (button == accueilToggleButton) {
            refreshAccueil();
        }
        if (button == produitsToggleButton) {
            refreshTableFromage();
        }
        if (button == plateauxToggleButton) {
            refreshTablePlateaux();
        }
        if (button == planificationToggleButton) {
            refreshTablePlanifierTotal();
            refreshTablePlanifierParCommande();
        }
        if (button == commandesToggleButton) {
            refreshTableCommande();
        }
    }//GEN-LAST:event_mainControlToggleButtonActionPerformed

    private void addPlateauJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlateauJButtonActionPerformed
        try {
            AddPlateauJDialog newPlateauxJDialog = new AddPlateauJDialog(this, true, this.iApp);
            Object[] plateau = newPlateauxJDialog.showDialog();//nom, prix, listeProduits
            if(plateau != null) {
                iApp.ajouterPlateauStandard(Double.parseDouble((String)plateau[1]), (String)plateau[0], (ArrayList)plateau[2]);
                refreshTablePlateaux();
            }
        } catch (NomTropLongException ex) { //A CHANGER
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (QuantiteParPersonneInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (PrixInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (ErreurInconnueException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur inconnue", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addPlateauJButtonActionPerformed

    private void addCommandesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommandesJButtonActionPerformed

        String nom = "Indefini";
        double prix = -1;
        double montant = -1;
        LocalDate date = null;
        String commentaire = null;
        try {
            CommandeJDialog newCommandeJDialog = new CommandeJDialog(this, true, iApp);
            Object[] commande = newCommandeJDialog.showDialog();//nom, date, prix, montant, commentaire, plateau_quantite_nbPersonnes(ArrayList d'ArrayLists)
            if (commande != null) {
                if (!((String) commande[0]).isEmpty()) {
                    nom = (String) commande[0];
                }
                if (!((String) commande[2]).isEmpty()) {
                    prix = Double.parseDouble((String) commande[2]);
                }
                if (!((String) commande[3]).isEmpty()) {
                    montant = Double.parseDouble((String) commande[3]);
                }
                iApp.ajouterCommande(nom, (LocalDate) commande[1], prix, montant, (String) commande[4], (ArrayList<ArrayList>) commande[5]);
                refreshTableCommande();
            } 
        } catch (NomTropLongException ex) { //A CHANGER
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (QuantiteParPersonneInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (PrixInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (ErreurInconnueException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur inconnue", JOptionPane.ERROR_MESSAGE);
        }
        refreshTableCommande();
    }//GEN-LAST:event_addCommandesJButtonActionPerformed


    private void deleteProduitJToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProduitJToggleButton1ActionPerformed
        ChooserDeleteProduitsJDialog deleteProduitJDialog = new ChooserDeleteProduitsJDialog(this, true, this.iApp);
        deleteProduitJDialog.setVisible(true);
    }//GEN-LAST:event_deleteProduitJToggleButton1ActionPerformed

    private void editProduitJToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProduitJToggleButton1ActionPerformed
        ChooserEditProduitsJDialog editProduitsJDialog = new ChooserEditProduitsJDialog(this, true, this.iApp);
        editProduitsJDialog.setVisible(true);
    }//GEN-LAST:event_editProduitJToggleButton1ActionPerformed

    private void editCommandeProduitJToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCommandeProduitJToggleButton2ActionPerformed
        ChooserEditCommandeJDialog1 editCommandeJDialog = new ChooserEditCommandeJDialog1(this, true, this.iApp);
        editCommandeJDialog.setVisible(true);
    }//GEN-LAST:event_editCommandeProduitJToggleButton2ActionPerformed

    private void deleteCommandeJToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommandeJToggleButton2ActionPerformed
        ChooserDeleteCommandeJDialog deleteCommandeJDialog = new ChooserDeleteCommandeJDialog(this, true, this.iApp);
        deleteCommandeJDialog.setVisible(true);
    }//GEN-LAST:event_deleteCommandeJToggleButton2ActionPerformed

    private void deletePlateauToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlateauToggleButtonActionPerformed
        ChooserDeletePlateauJDialog deletePlateauJDialog = new ChooserDeletePlateauJDialog(this, true, this.iApp);
        deletePlateauJDialog.setVisible(true);
    }//GEN-LAST:event_deletePlateauToggleButtonActionPerformed

    private void editPlateauJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlateauJToggleButtonActionPerformed
        ChooserEditPlateauJDialog editPlateauJDialog = new ChooserEditPlateauJDialog(this, true, this.iApp);
        editPlateauJDialog.setVisible(true);
    }//GEN-LAST:event_editPlateauJToggleButtonActionPerformed

    private void addProduitsJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProduitsJToggleButtonActionPerformed
        AddProduitJDialog newProduitsJDialog = new AddProduitJDialog(this, true);
        //ici je recupere mes donnes brut et faire une condition pour savoir si c un fromage, une charcuterie, fruit ou autre
        Object[] produit = newProduitsJDialog.showDialog();//type, nom, quantite, fruit, prix ou type, nom, prix si autre
        Double prix = null;
        Double qpp = null;
        try {
            if (produit != null) {
                if (produit[0] == (Object) 0) {
                    //si prix ou quantite par personne vide
                    if (!((String) produit[4]).isEmpty()) {
                        prix = Double.parseDouble((String) produit[4]);
                    } else {
                        prix = -1.0;
                    }
                    if (!((String) produit[2]).isEmpty()) {
                        qpp = Double.parseDouble((String) produit[2]);
                    } else {
                        qpp = -1.0;
                    }
                    iApp.ajouterFromage((String) produit[1], prix, qpp, (String) produit[3]);
                    refreshTableFromage();
                } else if (produit[0] == (Object) 1) {
                    if (!((String) produit[4]).isEmpty()) {
                        prix = Double.parseDouble((String) produit[4]);
                    } else {
                        prix = -1.0;
                    }
                    if (!((String) produit[2]).isEmpty()) {
                        qpp = Double.parseDouble((String) produit[2]);
                    } else {
                        qpp = -1.0;
                    }
                    iApp.ajouterCharcuterie((String) produit[1], prix, qpp, (String) produit[3]);
                    refreshTableCharcuterie();
                } else if (produit[0] == (Object) 2) {
                    if (!((String) produit[4]).isEmpty()) {
                        prix = Double.parseDouble((String) produit[4]);
                    } else {
                        prix = -1.0;
                    }
                    if (!((String) produit[2]).isEmpty()) {
                        qpp = Double.parseDouble((String) produit[2]);
                    } else {
                        qpp = -1.0;
                    }
                    iApp.ajouterFruit((String) produit[1], prix, qpp, (String) produit[3]);
                    refreshTableFruit();
                } else if (produit[0] == (Object) 3) {
                    if (!((String) produit[2]).isEmpty()) {
                        prix = Double.parseDouble((String) produit[2]);
                    } else {
                        prix = -1.0;
                    }
                    iApp.ajouterAutre((String) produit[1], prix);
                    refreshTableAutre();
                }
            }

        } catch (NomTropLongException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (QuantiteParPersonneInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (PrixInvalideException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (ErreurInconnueException ex) {
            JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_addProduitsJToggleButtonActionPerformed

    private void fromageProduitsJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromageProduitsJToggleButtonActionPerformed
        refreshTableFromage();
    }//GEN-LAST:event_fromageProduitsJToggleButtonActionPerformed

    private void charcuterieProduitsJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charcuterieProduitsJToggleButtonActionPerformed
        refreshTableCharcuterie();
    }//GEN-LAST:event_charcuterieProduitsJToggleButtonActionPerformed

    private void fruitProduitsJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fruitProduitsJToggleButtonActionPerformed
        refreshTableFruit();
    }//GEN-LAST:event_fruitProduitsJToggleButtonActionPerformed

    private void autreProduitsJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autreProduitsJToggleButtonActionPerformed
        refreshTableAutre();
    }//GEN-LAST:event_autreProduitsJToggleButtonActionPerformed

    private void planificationChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planificationChoiceActionPerformed
        JToggleButton button = (JToggleButton) evt.getSource();
        String str = button.getText();

        CardLayout cardLayout = (CardLayout) planificationCards.getLayout();
        cardLayout.show(planificationCards, str);
    }//GEN-LAST:event_planificationChoiceActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        if (this.iApp != null) {
            refreshTablePlanifierTotal();
            refreshTablePlanifierParCommande();
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void parCommandePlanifcationJTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parCommandePlanifcationJTablePropertyChange
        if (this.iApp != null) {
            refreshTablePlanifierParCommande();
        }
    }//GEN-LAST:event_parCommandePlanifcationJTablePropertyChange

    private void planificationCommandeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planificationCommandeJComboBoxActionPerformed
        parCommandePlanificationModel.removeAllParCommandePlanification();
        Commande commandeSelectionnee = (Commande) planificationCommandeJComboBox.getSelectedItem();
        System.out.println(commandeSelectionnee);
        if (commandeSelectionnee != null) {
            parCommandePlanificationModel.addProduitsDeCommande(commandeSelectionnee);
        }
        parCommandePlanifcationJTable.setModel(parCommandePlanificationModel);
    }//GEN-LAST:event_planificationCommandeJComboBoxActionPerformed

    private void aPreparerJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aPreparerJToggleButtonActionPerformed
        commandeModel.ajouterAPreparer();
    }//GEN-LAST:event_aPreparerJToggleButtonActionPerformed

    private void aRecupererJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aRecupererJToggleButtonActionPerformed
        commandeModel.ajouterPreparee();
    }//GEN-LAST:event_aRecupererJToggleButtonActionPerformed

    private void recupereesJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recupereesJToggleButtonActionPerformed
        commandeModel.ajouterRecuperee();
    }//GEN-LAST:event_recupereesJToggleButtonActionPerformed

    private void archiveesJToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveesJToggleButtonActionPerformed
        commandeModel.ajouterArchivee();
    }//GEN-LAST:event_archiveesJToggleButtonActionPerformed

    public void refreshTableFromage() {
        ArrayList<Fromage> fromageArrayList = iApp.toutRecupererFromage();
        fromageModel.removeAllFromages();
        for (Fromage fromage : fromageArrayList) {
            fromageModel.addFromage(fromage);
        }
        produitsJTable.setModel(fromageModel);
    }

    public void refreshTableCharcuterie() {
        ArrayList<Charcuterie> charcuterieArrayList = iApp.toutRecupererCharcuterie();
        charcuterieModel.removeAllCharcuterie();
        for (Charcuterie charcuterie : charcuterieArrayList) {
            charcuterieModel.addCharcuterie(charcuterie);
        }
        produitsJTable.setModel(charcuterieModel);
    }

    public void refreshTableFruit() {
        ArrayList<Fruit> fruitArrayList = iApp.toutRecupererFruit();
        fruitModel.removeAllFruit();
        for (Fruit fruit : fruitArrayList) {
            fruitModel.addFruit(fruit);
        }
        produitsJTable.setModel(fruitModel);
    }

    public void refreshTableAutre() {
        ArrayList<AutreProduit> autretArrayList = iApp.toutRecupererAutre();
        autreModel.removeAllAutre();
        for (AutreProduit autre : autretArrayList) {
            autreModel.addAutre(autre);
        }
        produitsJTable.setModel(autreModel);
    }

    public void refreshAccueil() {
        ArrayList<Commande> listeCommandes = iApp.toutRecupererCommande();
        accueilTableModel.removeAllCommandes();
        accueilListModel.removeAllCommandes();
        LocalDate ajd = LocalDate.now();
        LocalDate demain = ajd.plusDays(1);
        for (Commande commande : listeCommandes) {
            if (commande.getDateRecuperation().equals(demain)) {
                accueilTableModel.addCommande(commande);
            }
            if (commande.getDateRecuperation().equals(ajd)) {
                accueilListModel.addCommande(commande);
            }
        }
        aPreparerClientJTable.setModel(accueilTableModel);
    }

    public void refreshTableCommande() {
        ArrayList<Commande> listeCommandes = iApp.toutRecupererCommande();
        commandeModel.removeAllCommandes();
        for (Commande commande : listeCommandes) {
            commandeModel.addCommande(commande);
        }
    }

    public void refreshTablePlateaux() {
        ArrayList<Plateau> plateaux = iApp.toutRecupererPlateauStandard();
        plateauModel.removeAllPlateaux();
        for (Plateau plateau : plateaux) {
            plateauModel.addPlateau(plateau);
        }
        plateauxJTable.setModel(plateauModel);
    }

    public void refreshTablePlanifierTotal() {
        //je rÃ©cupÃ¨re la date selectionnÃ©e par l'utilisateur et la convertit en 
        //localDate pour comparer avec les dates des commandes
        LocalDate dateChoisie = jDateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        ArrayList<Commande> commandes = iApp.toutRecupererCommande();
        totalPlanificationModel.removeAllTotalPlanification();
        if (!commandes.isEmpty()) {
            for (Commande commande : commandes) {
                if (commande != null) {
                    //je n'ajoute au model que si la date de rÃ©cupÃ©ration de la commande que nous sommes en train d'inspecter
                    //est == Ã  la date de rÃ©cupÃ©ration choisie par l'utilisateur
                    if (commande.getDateRecuperation().compareTo(dateChoisie) == 0) {
                        totalPlanificationModel.addProduitsDeCommande(commande);
                    }
                }
            }
        }

        totalPlanificationJTable.setModel(totalPlanificationModel);
    }

    public void refreshTablePlanifierParCommande() {
//        je rÃ©cupÃ¨re la date selectionnÃ©e par l'utilisateur et la convertit en 
//        localDate pour comparer avec les dates des commandes
        parCommandePlanificationModel.removeAllParCommandePlanification();
        DefaultComboBoxModel planificationCommandeCBBModel = new DefaultComboBoxModel<Commande>();
        LocalDate dateChoisie = jDateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        ArrayList<Commande> commandes = iApp.toutRecupererCommande();
        if (!commandes.isEmpty()) {
            for (Commande commande : commandes) {
                if (commande != null) {
                    //je n'ajoute au model de combobox que si la date de rÃ©cupÃ©ration de la commande que nous sommes en train 
                    //d'inspecter est == Ã  la date de rÃ©cupÃ©ration choisie par l'utilisateur
                    if (commande.getDateRecuperation().equals(dateChoisie)) {
                        planificationCommandeCBBModel.addElement(commande);
                        //TODO : ajouter au model de la combobox, et afficher l'item qui est isSelected
                        // avant, dans l'actionListener de la combobox, il faudra appeler refreshTablePlanifierParCommande()
                    }
                }
            }
        }
        planificationCommandeJComboBox.setModel(planificationCommandeCBBModel);
        Commande commandeSelectionnee = (Commande) planificationCommandeJComboBox.getSelectedItem();
        System.out.println(commandeSelectionnee);
        if (commandeSelectionnee != null) {
            parCommandePlanificationModel.addProduitsDeCommande(commandeSelectionnee);
        }
        parCommandePlanifcationJTable.setModel(parCommandePlanificationModel);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aPreparerClientJPanel;
    private javax.swing.JScrollPane aPreparerClientJScrollPane;
    private javax.swing.JTable aPreparerClientJTable;
    private javax.swing.JToggleButton aPreparerJToggleButton;
    private javax.swing.JToggleButton aRecupererJToggleButton;
    private javax.swing.JPanel accueilPanel;
    private javax.swing.JToggleButton accueilToggleButton;
    private javax.swing.JButton addCommandesJButton;
    private javax.swing.JButton addPlateauJButton;
    private javax.swing.JButton addProduitsJToggleButton;
    private javax.swing.JToggleButton archiveesJToggleButton;
    private javax.swing.JToggleButton autreProduitsJToggleButton;
    private javax.swing.JPanel centrePanel;
    private javax.swing.JToggleButton charcuterieProduitsJToggleButton;
    private javax.swing.ButtonGroup commandesButtonGroup;
    private javax.swing.JScrollPane commandesJScrollPane;
    private javax.swing.JTable commandesJTable;
    private javax.swing.JPanel commandesMenuJPanel;
    private javax.swing.JPanel commandesPanel;
    private javax.swing.JToggleButton commandesToggleButton;
    private javax.swing.JPanel crudCommandesMenuJPanel2;
    private javax.swing.JPanel crudPlateauxMenuJPanel3;
    private javax.swing.JPanel crudProduitsMenuJPanel1;
    private javax.swing.JButton deleteCommandeJToggleButton2;
    private javax.swing.JButton deletePlateauToggleButton;
    private javax.swing.JButton deleteProduitJToggleButton1;
    private javax.swing.JButton editCommandeProduitJToggleButton2;
    private javax.swing.JButton editPlateauJToggleButton;
    private javax.swing.JButton editProduitJToggleButton1;
    private javax.swing.JToggleButton fromageProduitsJToggleButton;
    private javax.swing.JToggleButton fruitProduitsJToggleButton;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.ButtonGroup mainControlButtonGroup;
    private javax.swing.JPanel mainControlPanel;
    private javax.swing.JToggleButton parCommandeJToggleButton;
    private javax.swing.JTable parCommandePlanifcationJTable;
    private javax.swing.JPanel parCommandePlanificationJPanel1;
    private javax.swing.JScrollPane parCommandePlanificationJScrollPane;
    private javax.swing.ButtonGroup planificationButtonGroup;
    private javax.swing.JPanel planificationCards;
    private javax.swing.JPanel planificationChoiceMenuJPanel1;
    private javax.swing.JComboBox<Commande> planificationCommandeJComboBox;
    private javax.swing.JPanel planificationMenuJPanel;
    private javax.swing.JPanel planificationPanel;
    private javax.swing.JToggleButton planificationToggleButton;
    private javax.swing.JButton plateauStandardJButton;
    private javax.swing.JTable plateauxJTable;
    private javax.swing.JPanel plateauxMenuJPanel;
    private javax.swing.JPanel plateauxPanel;
    private javax.swing.JScrollPane plateauxTableJScrollPane;
    private javax.swing.JToggleButton plateauxToggleButton;
    private javax.swing.ButtonGroup produitsButtonGroup;
    private javax.swing.JScrollPane produitsJScrollPane;
    private javax.swing.JTable produitsJTable;
    private javax.swing.JPanel produitsMenuJPanel;
    private javax.swing.JPanel produitsPanel;
    private javax.swing.JToggleButton produitsToggleButton;
    private javax.swing.JPanel recupAPreparerJPanel;
    private javax.swing.JLabel recupTodayJLabel;
    private javax.swing.JList<String> recupTodayJList;
    private javax.swing.JPanel recupTodayJPanel;
    private javax.swing.JScrollPane recupTodayJScrollPane;
    private javax.swing.JToggleButton recupereesJToggleButton;
    private javax.swing.JToggleButton totalJToggleButton;
    private javax.swing.JPanel totalPlanificationJPanel;
    private javax.swing.JScrollPane totalPlanificationJScrollPane;
    private javax.swing.JTable totalPlanificationJTable;
    private javax.swing.JLabel welcomeJLabel;
    // End of variables declaration//GEN-END:variables
}
